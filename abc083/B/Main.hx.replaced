class Main {
	static inline function digitSum(n:Int, radix:Int) {
		var sum = 0;
		while (0 < n) {
			sum += n % radix;
			n = Std.int(n / radix);
		}
		return sum;
	}

	static function main() {
		final cin = new CharIn();
		final n = cin.int(SP);
		final a = cin.int(SP);
		final b = cin.int(LF);

		inline function rangeIncludes(n:Int)
			return a <= n && n <= b;

		var total = 0;
		for (i in 1...n + 1) {
			if (rangeIncludes(digitSum(i, 10)))
				total += i;
		}

		Sys.println(total);
	}
}


/**
	wronganswer v0.2.0-alpha / CC0
	https://github.com/fal-works/wronganswer
**/

abstract CharIn(haxe.io.Input) {
	public extern inline function new()
		this = Sys.stdin();

	public inline function str(delimiter:Int) {
		final buffer = new haxe.io.BytesBuffer();
		try {
			var byte:Int;
			while ((byte = this.readByte()) != delimiter)
				buffer.addByte(byte);
		} catch (e:haxe.io.Eof) {}

		return buffer.getBytes().toString();
	}

	public inline function int(delimiter:Int):Int
		return Std.parseInt(str(delimiter));
}

enum abstract Delimiter(Int) to Int {
	final LF = "\n".code;
	final SP = " ".code;
}
